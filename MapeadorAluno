package persistencia;

import controle.ControladorBiblioteca;
import dao.Aluno;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;


public class MapeadorAluno {

    private HashMap<Integer, Aluno> cacheAlunos = new HashMap<>();
    private final String filename = "alunos.dat";

    public MapeadorAluno() {
        this.load();
    }

    public Aluno get(Integer idAluno) {
        return cacheAlunos.get(idAluno);
    }

    public void put(Aluno aluno) {
        boolean jaExiste = false;

        if (aluno != null) {
            if (cacheAlunos.get(aluno.getMatricula()) != null) {
                jaExiste = true;
            }
        }

        if (jaExiste) {
            ControladorBiblioteca.getInstance().semSucesso();
        } else {
            cacheAlunos.put(aluno.getMatricula(), aluno);
            persist();
            ControladorBiblioteca.getInstance().comSucesso();
        }
    }

    public void persist() {
        try {
            FileOutputStream out = new FileOutputStream(filename);
            ObjectOutputStream obj = new ObjectOutputStream(out);
            obj.writeObject(cacheAlunos);
            obj.flush();
            out.flush();
            obj.close();
            out.close();
            obj = null;
            out = null;
        } catch (Exception e) {
            Logger.getLogger(MapeadorRevista.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void load() {
        try {
            FileInputStream in = new FileInputStream(filename);
            ObjectInputStream obj = new ObjectInputStream(in);
            this.cacheAlunos = (HashMap<Integer, Aluno>) obj.readObject();
            obj.close();
            in.close();
            obj = null;
            in = null;
        } catch (IOException | ClassNotFoundException e) {
            Logger.getLogger(MapeadorRevista.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public Collection<Aluno> getAlunos() {
            return cacheAlunos.values();
    }
}
